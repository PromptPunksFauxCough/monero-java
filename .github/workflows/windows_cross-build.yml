name: Windows Cross-Compile (VcPkg)

on:
  push:
    branches: ['**']
  release:
    types: [published]

jobs:
  build-windows:
    runs-on: ubuntu-22.04
    timeout-minutes: 120

    steps:
      - name: Detect Architecture - (All)
        id: arch
        run: |
          echo "ARCH=amd64" >> $GITHUB_ENV
#          if [[ "${{ inputs.variant }}" == *"arm64"* ]]; then
#            echo "ARCH=arm64" >> $GITHUB_ENV
#            echo "OSX_ARCH=arm64" >> $GITHUB_ENV
#          else
#            echo "ARCH=amd64" >> $GITHUB_ENV
#            echo "OSX_ARCH=x86_64" >> $GITHUB_ENV
#          fi

      - name: Setup JDK - (All)
        uses: actions/setup-java@v4
        with:
          distribution: "liberica"
          java-version: "21"

      - name: Configure git for Line Endings - (All)
        run: |
          git config --global core.autocrlf input

      - name: Checkout Source - (All)
        uses: actions/checkout@v4
        with:
          submodules: false

      - name: Use CMake 3.24 - (All)
        uses: lukka/get-cmake@latest
        with:
          cmakeVersion: "3.24.0"

#      - name: Install Core Cross-Compile Tools and Utilities
#        run: |
#          sudo apt-get update
#          sudo apt-get install -y \
#            build-essential \
#            g++-mingw-w64-x86-64 \
#            ccache \
#            git \
#            curl \
#            unzip \
#            make

      - name: Cache and Install Core Cross-Compile Tools and Utilities
        id: cache-apt
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: |
            build-essential
            g++-mingw-w64-x86-64
            ccache
            git
            curl
            unzip
            make

#      - name: Cache Vcpkg
#        id: cache-vcpkg
#        uses: actions/cache@v4
#        with:
#          path: |
#            vcpkg/installed
#            vcpkg/archives
#          key: ${{ runner.os }}-${{ hashFiles('vcpkg.json') }}
#          restore-keys: |
#            ${{ runner.os }}-
#
#      - name: Setup Vcpkg and Install Dependencies
#        run: |
#          # Disable telemetry
#          echo "VCPKG_DISABLE_METRICS=1" >> $GITHUB_ENV
#          echo "VCPKG_BINARY_SOURCES=clear;nuget,GitHubActions,readwrite" >> $GITHUB_ENV
#
#          # Git Vcpkg
#          git clone https://github.com/microsoft/vcpkg.git
#
#          # Inject custom unbound port
#          mkdir -p vcpkg/ports/unbound
#
#          cat <<EOF > vcpkg/ports/unbound/vcpkg.json
#          {
#            "name": "unbound",
#            "version-string": "1.17.1",
#            "description": "DNS resolver library",
#            "homepage": "https://nlnetlabs.nl/projects/unbound/",
#            "dependencies": [
#              "openssl",
#              "expat"
#            ]
#          }
#          EOF
#
#          cat <<EOF > vcpkg/ports/unbound/portfile.cmake
#          vcpkg_from_github(
#              OUT_SOURCE_PATH SOURCE_PATH
#              REPO NLnetLabs/unbound
#              REF release-1.17.1
#              SHA512 0d1f3e8b6f9c4e2a7d8e9f1a2b3c4d5e6f7a8b9c0d1e2f3a4b5c6d7e8f9a0b1c2d3e4f5a6b7c8d9e0f1a2b3c4d5e6f7
#          )
#
#          vcpkg_configure_cmake(
#              SOURCE_PATH \${SOURCE_PATH}
#              PREFER_NINJA
#          )
#
#          vcpkg_install_cmake()
#          vcpkg_copy_pdbs()
#
#          EOF
#
#          # Define Dependencies
#          cat <<EOF > vcpkg/vcpkg.json
#          {
#            "name": "monero-dependencies",
#            "version": "0.1.0",
#            "builtin-baseline": "b98afc9f1192becb2f447cee485ce36ba111f9f6",
#            "dependencies": [
#              "boost-chrono",
#              "boost-date-time",
#              "boost-filesystem",
#              "boost-program-options",
#              "boost-regex",
#              "boost-serialization",
#              "boost-system",
#              "boost-thread",
#              "openssl",
#              "zeromq",
#              "libsodium",
#              "hidapi",
#              "unbound",
#              "liblzma",
#              "readline",
#              "expat",
#              "qttools",
#              "libusb",
#              "protobuf",
#              "graphviz"
#            ],
#            "overrides": [
#              { "name": "boost", "version": "1.77.0" },
#              { "name": "boost-chrono", "version": "1.77.0" },
#              { "name": "boost-date-time", "version": "1.77.0" },
#              { "name": "boost-filesystem", "version": "1.77.0" },
#              { "name": "boost-program-options", "version": "1.77.0" },
#              { "name": "boost-regex", "version": "1.77.0" },
#              { "name": "boost-serialization", "version": "1.77.0" },
#              { "name": "boost-system", "version": "1.77.0" },
#              { "name": "boost-thread", "version": "1.77.0" },
#              { "name": "boost-build", "version": "1.77.0" },
#              { "name": "boost-assert", "version": "1.77.0" },
#              { "name": "boost-config", "version": "1.77.0" },
#              { "name": "boost-core", "version": "1.77.0" },
#              { "name": "boost-detail", "version": "1.77.0" },
#              { "name": "boost-io", "version": "1.77.0" },
#              { "name": "boost-move", "version": "1.77.0" },
#              { "name": "boost-predef", "version": "1.77.0" },
#              { "name": "boost-preprocessor", "version": "1.77.0" },
#              { "name": "boost-static-assert", "version": "1.77.0" },
#              { "name": "boost-throw-exception", "version": "1.77.0" },
#              { "name": "boost-type-traits", "version": "1.77.0" },
#              { "name": "boost-uninstall", "version": "1.77.0" },
#              { "name": "boost-utility", "version": "1.77.0" }
#            ]
#          }
#          EOF
#
#          # Install Vcpkg
#          ./vcpkg/bootstrap-vcpkg.sh
#
#          # Create custom triplets for release-only builds
#          cat <<EOF > vcpkg/triplets/community/x64-mingw-static-release.cmake
#          include(triplets/community/x64-mingw-static.cmake)
#          set(VCPKG_BUILD_TYPE release)
#          EOF
#
#          printf "THE MOTHER FUCKING STATIC RELEASE TRIPLET:\n"
#          cat vcpkg/triplets/community/x64-mingw-static-release.cmake
#
#          cat <<EOF > vcpkg/triplets/community/x64-mingw-dynamic-release.cmake
#          include(triplets/community/x64-mingw-dynamic.cmake)
#          set(VCPKG_BUILD_TYPE release)
#          EOF
#
#          printf "THE MOTHER FUCKING DYNAMIC RELEASE TRIPLET:\n"
#          cat vcpkg/triplets/community/x64-mingw-dynamic-release.cmake
#
#          # Install Dependencies via Vcpkg
#          cd vcpkg
#          ./vcpkg install --triplet x64-mingw-static-release --overlay-triplets=triplets/community --overlay-ports=./ports/unbound --allow-unsupported
#          ./vcpkg install --triplet x64-mingw-dynamic-release --overlay-triplets=triplets/community --overlay-ports=./ports/unbound --allow-unsupported
#
#          # List Packages Installed via Vcpkg
#          ./vcpkg list

      - name: Setup Conan and Install Dependencies
        run: |
          # Install Conan 2.x cleanly
          pip install "conan>=2.0" --upgrade

          # Disable telemetry
          mkdir -p ~/.conan2
          echo -e "[general]\ntelemetry=disabled" > ~/.conan2/global.conf

          # Detect and configure default profile
          conan profile detect --force

          # Explicitly set cross-build triplet for MinGW
          conan profile update settings.os=Windows default
          conan profile update settings.arch=x86_64 default
          conan profile update settings.compiler=gcc default
          conan profile update settings.compiler.version=13 default   # <-- match your MinGW GCC
          conan profile update settings.compiler.libcxx=libstdc++11 default
          conan profile update settings.build_type=Release default

          # Create conanfile.txt with required dependencies
          cat <<EOF > conanfile.txt
          [requires]
          boost/1.77.0
          openssl/3.1.3
          zeromq/4.3.4
          libsodium/1.0.18
          hidapi/0.12.0
          liblzma/5.2.5
          readline/8.2
          expat/2.5.0
          qttools/6.5.0
          libusb/1.0.26
          protobuf/3.21.12
          graphviz/8.0.0
          unbound/1.17.1

          [generators]
          CMakeDeps
          CMakeToolchain
          EOF

          # Create custom recipe for Unbound
          mkdir -p unbound && cd unbound
          cat <<EOF > conanfile.py
          from conan import ConanFile
          from conan.tools.cmake import CMake, cmake_layout

          class UnboundConan(ConanFile):
              name = "unbound"
              version = "1.17.1"
              license = "BSD-3-Clause"
              url = "https://nlnetlabs.nl/projects/unbound/"
              description = "DNS resolver library"
              settings = "os", "compiler", "build_type", "arch"
              generators = "CMakeDeps", "CMakeToolchain"
              requires = "openssl/3.1.3", "expat/2.5.0"
              exports_sources = "CMakeLists.txt", "src/*"

              def layout(self):
                  cmake_layout(self)

              def source(self):
                  self.run("git clone https://github.com/NLnetLabs/unbound.git src")
                  self.run("cd src && git checkout release-1.17.1")

              def build(self):
                  cmake = CMake(self)
                  cmake.configure()
                  cmake.build()

              def package(self):
                  cmake = CMake(self)
                  cmake.install()

              def package_info(self):
                  self.cpp_info.libs = ["unbound"]
          EOF

          # Export custom Unbound package
          conan export . --name=unbound --version=1.17.1 --user=local --channel=testing
          cd ..

          # Install all dependencies in one shot
          conan install conanfile.txt \
              --output-folder=build \
              --build=missing \
              --profile=default \
              --settings=arch=x86_64 \
              --settings=os=Windows \
              --settings=compiler=gcc \
              --settings=compiler.version=13 \
              --settings=compiler.libcxx=libstdc++11 \
              --settings=build_type=Release

          # List installed packages (short format)
          conan list --format=short

      - name: Verify Boost Libraries
        run: |
          find /usr ${{ github.workspace }}/vcpkg -name '*boost*' | grep -E 'chrono|date_time|filesystem|program_options|regex|serialization|wserialization|system|thread|locale'

      - name: Dependency Introspection
        run: |
          find /usr ${{ github.workspace }}/vcpkg -name '*cmake*' -o -name '*ssl*' -o -name '*crypto*' \
                         -o -name '*zmq*' -o -name '*sodium*' -o -name '*usb*' \
                         -o -name '*boost*' -o -name '*proto*' -o -name '*unbound*' \
                         -o -name '*hidapi*' -o -name '*backtrace*' -o -name '*unwind*' \
                         -o -name '*readline*' | grep -v -e "/man/" -e "/doc/" -e python

      - name: Configure and Build (Portable) - (Windows)
        run: |
          mkdir -p build-portable
          cmake -S . -B build-portable \
            -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake \
            -DCMAKE_SYSTEM_PROCESSOR=$ARCH \
            -DCMAKE_BUILD_TYPE=Release \
            -DSTATIC_BUILD=ON \
            -DCMAKE_C_COMPILER_LAUNCHER=ccache \
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache
          cmake --build build-portable --parallel 4

      - name: Configure and Build (Dynamic) - (Windows)
        run: |
          mkdir -p build-dynamic
          cmake -S . -B build-dynamic \
            -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake \
            -DCMAKE_SYSTEM_PROCESSOR=$ARCH \
            -DCMAKE_BUILD_TYPE=Release \
            -DBUILD_STATIC=OFF \
            -DCMAKE_C_COMPILER_LAUNCHER=ccache \
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache
          cmake --build build-dynamic --parallel 4

      - name: Upload Build Artifacts (Portable) - (Windows)
        uses: actions/upload-artifact@v4
        with:
          name: portable-build
          path: build-portable

      - name: Upload Build Artifacts (Dynamic) - (Windows)
        uses: actions/upload-artifact@v4
        with:
          name: dynamic-build
          path: build-dynamic
