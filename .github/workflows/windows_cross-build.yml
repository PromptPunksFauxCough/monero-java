name: Windows (Cross-Compile) (PoC)

on:
  push:
    branches:
      - '**'
  release:
    types: [published]

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 301

    steps:
      - name: Checkout source
        uses: actions/checkout@v4
        with:
          submodules: false

      - name: Install MinGW-w64 and Dependencies via apt
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            g++-mingw-w64-x86-64 \
            git \
            cmake \
            make \
            unzip \
            ccache \
            gettext \
            curl \
            libssl-dev \
            libsodium-dev \
            libzmq5-dev \
            libhidapi-dev \
            libunbound-dev \
            libprotobuf-dev \
            libusb-1.0-0-dev \
            libreadline-dev

      - name: Download and Extract Boost
        run: |
          curl -LO https://archives.boost.io/release/1.74.0/source/boost_1_74_0.zip
          unzip boost_1_74_0.zip

      - name: Build and Install Boost
        run: |
          cd boost_1_74_0
          # Use the default gcc to build the bootstrap engine
          ./bootstrap.sh --prefix=$GITHUB_WORKSPACE/boost_install
          # Use the mingw-w64 compiler to build the libraries for Windows
          ./b2 toolset=gcc-mingw --with-chrono --with-date_time --with-filesystem --with-program_options \
            --with-regex --with-serialization --with-system --with-thread \
            --with-locale link=static threading=multi address-model=64 \
            --prefix=$GITHUB_WORKSPACE/boost_install install -j 4

      - name: Create MinGW-w64 Toolchain File
        run: |
          echo "set(CMAKE_SYSTEM_NAME Windows)" > mingw-w64-x86_64-toolchain.cmake
          echo "set(TOOLCHAIN_PREFIX x86_64-w64-mingw32)" >> mingw-w64-x86_64-toolchain.cmake
          echo "set(CMAKE_C_COMPILER ${TOOLCHAIN_PREFIX}-gcc)" >> mingw-w64-x86_64-toolchain.cmake
          echo "set(CMAKE_CXX_COMPILER ${TOOLCHAIN_PREFIX}-g++)" >> mingw-w64-x86_64-toolchain.cmake
          echo "set(CMAKE_RC_COMPILER ${TOOLCHAIN_PREFIX}-windres)" >> mingw-w64-x86_64-toolchain.cmake
          echo "set(CMAKE_FIND_ROOT_PATH \"/usr/${TOOLCHAIN_PREFIX}\")" >> mingw-w64-x86_64-toolchain.cmake
          echo "set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)" >> mingw-w64-x86_64-toolchain.cmake
          echo "set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)" >> mingw-w64-x86_64-toolchain.cmake
          echo "set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)" >> mingw-w64-x86_64-toolchain.cmake

      - name: Restore ccache cache
        id: cache-ccache
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/.ccache
          key: ${{ runner.os }}-ccache-${{ hashFiles('**/*.cpp', '**/*.c', '**/*.h', '**/CMakeLists.txt') }}
          restore-keys: ${{ runner.os }}-ccache-

      - name: Configure Git for line endings
        run: git config --global core.autocrlf input

      - name: CMake Configure
        run: |
          cmake -B build \
            -DCMAKE_TOOLCHAIN_FILE=./mingw-w64-x86_64-toolchain.cmake \
            -DCMAKE_BUILD_TYPE=Release \
            -DSTATIC_BUILD=ON \
            -DCMAKE_C_COMPILER_LAUNCHER=ccache \
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
            -DBOOST_ROOT=$GITHUB_WORKSPACE/boost_install \
            -DBoost_LIBRARY_DIR_HINTS=$GITHUB_WORKSPACE/boost_install/lib

      - name: CMake Build
        run: |
          cmake --build build --config Release --parallel 4

      - name: Save ccache cache
        if: always() && steps.cache-ccache.outputs.cache-hit != 'true'
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/.ccache
          key: ${{ runner.os }}-ccache-${{ hashFiles('**/*.cpp', '**/*.c', '**/*.h', '**/CMakeLists.txt') }}

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-binaries
          path: build/bin/
