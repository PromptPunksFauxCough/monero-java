name: monero-java (Portable & Dynamic)

on:
  workflow_call:
    inputs:
      runner:
        required: true
        type: string
      variant:
        required: true
        type: string

jobs:
  build:
    runs-on: ${{ inputs.runner }}

    strategy:
      matrix:
        build_type: [portable, dynamic]

    env:
      JAVA_HOME: /opt/hostedtoolcache/Java_Liberica_jdk/21.0.8-12/x64
      JAVA_HOME_21_X64: /opt/hostedtoolcache/Java_Liberica_jdk/21.0.8-12/x64

    steps:
      - name: Detect Architecture
        id: arch
        run: |
          if [[ "${{ inputs.variant }}" == *"arm64"* ]]; then
            echo "ARCH=arm64" >> $GITHUB_ENV
          else
            echo "ARCH=amd64" >> $GITHUB_ENV

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          distribution: "liberica"
          java-version: "21"

      - name: Checkout Source
        uses: actions/checkout@v4
        with:
          submodules: false

      - name: Use CMake 3.24
        uses: lukka/get-cmake@latest
        with:
          cmakeVersion: "3.24.0"

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential libboost-all-dev libssl-dev libzmq3-dev libsodium-dev \
            unbound libunbound-dev liblzma-dev libreadline-dev libexpat1-dev \
            qttools5-dev libhidapi-dev libusb-1.0-0-dev libprotobuf-dev \
            doxygen graphviz libtool gperf libevent-dev pkg-config ccache

      - name: Build and Install Boost (w/PIC Support)
        if: matrix.build_type == 'portable'
        run: |
          mkdir -p /opt/boost-pic
          curl -LO https://archives.boost.io/release/1.74.0/source/boost_1_74_0.zip
          unzip boost_1_74_0.zip
          cd boost_1_74_0

          if [ "$ARCH" = "arm64" ]; then
            ARCH_FLAGS="architecture=arm address-model=64"
          else
            ARCH_FLAGS=""
          fi

          ./bootstrap.sh --prefix=/opt/boost-pic --with-toolset=gcc
          ./b2 cxxflags="-fPIC" linkflags="-fPIC" --with-chrono --with-date_time --with-filesystem \
              --with-program_options --with-regex --with-serialization --with-system \
              --with-thread --with-locale toolset=gcc link=static runtime-link=static \
              threading=multi $ARCH_FLAGS --prefix=/opt/boost-pic install

#      - name: Configure and Build (Portable) + (Build Debugging)
#        if: matrix.build_type == 'portable'
#        run: |
#          ccache -C
#          mkdir -p build-portable
#          cmake -S . -B build-portable -DCMAKE_SYSTEM_PROCESSOR=$ARCH \
#            -DCMAKE_BUILD_TYPE=Release -DBUILD_STATIC=ON -DBOOST_ROOT=/opt/boost-pic \
#            -DBoost_NO_SYSTEM_PATHS=ON -DBOOST_INCLUDEDIR=/opt/boost-pic/include \
#            -DBOOST_LIBRARYDIR=/opt/boost-pic/lib -DCMAKE_FIND_DEBUG_MODE=ON \
#            -DCMAKE_VERBOSE_MAKEFILE=ON --trace-expand
#          cmake --build build-portable --parallel 4
#
#      - name: Configure and Build (Dynamic) + (Build Debugging)
#        if: matrix.build_type == 'dynamic'
#        run: |
#          ccache -C
#          mkdir -p build-dynamic
#          cmake -S . -B build-dynamic -DCMAKE_SYSTEM_PROCESSOR=$ARCH \
#          -DCMAKE_BUILD_TYPE=Release -DBUILD_STATIC=OFF \
#          -DCMAKE_FIND_DEBUG_MODE=ON -DCMAKE_VERBOSE_MAKEFILE=ON --trace-expand
#          cmake --build build-dynamic --parallel 4

      - name: Configure and Build (Portable)
        if: matrix.build_type == 'portable'
        run: |
          ccache -C
          mkdir -p build-portable
          cmake -S . -B build-portable \
            -DCMAKE_SYSTEM_PROCESSOR=$ARCH \
            -DCMAKE_BUILD_TYPE=Release \
            -DBUILD_STATIC=ON \
            -DBOOST_ROOT=/opt/boost-pic \
            -DBoost_NO_SYSTEM_PATHS=ON \
            -DBOOST_INCLUDEDIR=/opt/boost-pic/include \
            -DBOOST_LIBRARYDIR=/opt/boost-pic/lib
          cmake --build build-portable --parallel 4

      - name: Configure and Build (Dynamic)
        if: matrix.build_type == 'dynamic'
        run: |
          ccache -C
          mkdir -p build-dynamic
          cmake -S . -B build-dynamic \
            -DCMAKE_SYSTEM_PROCESSOR=$ARCH \
            -DCMAKE_BUILD_TYPE=Release \
            -DBUILD_STATIC=OFF
          cmake --build build-dynamic --parallel 4

      - name: Package Release Artifacts
        run: |
          mkdir -p dist/${{ matrix.build_type }}
          cp build-${{ matrix.build_type }}/libmonero-java.so dist/${{ matrix.build_type }}/
          if [ "${{ matrix.build_type }}" = "dynamic" ]; then
            cp external/monero-cpp/build/libmonero-cpp.so dist/${{ matrix.build_type }}/
          fi
          zip -r dist/monero-java_${{ inputs.variant }}-${{ matrix.build_type }}.zip dist/${{ matrix.build_type }}/
          tar -czvf dist/monero-java_${{ inputs.variant }}-${{ matrix.build_type }}.tar.gz -C dist/${{ matrix.build_type }} .

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: monero-java-${{ inputs.variant }}-${{ matrix.build_type }}
          path: dist/${{ matrix.build_type }}/*

      - name: Generate GitHub Release
        if: github.ref == 'refs/heads/static'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: run-${{ github.run_id }}
          name: CI Build ${{ github.run_id }}
          draft: false
          prerelease: true
          files: |
            dist/*.zip
            dist/*.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
